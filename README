Performance
-----------

On table with 100MB data (1M elements)
Inserting: 2000 req/sec
Searching: 150-1500 req/sec

Backend
-------

Optimized KD-trees with queue of events. [TODO] More description.

Building
--------
Shuffla requires g++, version >= 4.6; boost, version >= 1.49. For information about installing boost visit:
* windows users: http://www.boost.org/doc/libs/1_49_0/more/getting_started/windows.html
* other OS: http://www.boost.org/doc/libs/1_49_0/more/getting_started/unix-variants.html

After installing boost:
./configure
make
make install

Running Shuffla
---------------

./Shuffla [config_file]

For details about config file, read: [TODO]

Creating table
--------------

You can create table by sending request:
http://0.0.0.0:15942/create_table/<table_name>/?property_name=property_type[&property_name=property_type]*

For example:
http://0.0.0.0:15942/create_table/users/?user_id=int&name=string&age=int

Inserting data
--------------
It is as simple as that:
http://0.0.0.0:15942/insert/<table name>/?property_name=property_value[&property_name=property_value]*

For example
http://0.0.0.0:15942/insert/users/?user_id=7&name=Adam&age=35
http://0.0.0.0:15942/insert/users/?user_id=8&name=Ashley&age=30
http://0.0.0.0:15942/insert/users/?user_id=9&name=Ashley&age=25

Search command
--------------
examples:

query: http://0.0.0.0:15942/search/users/?user_id=7
result:
{
 count: 1,
 results: {
  {user_id: 7, name: Adam, age: 35}
  }
}

query: http://0.0.0.0:15942/search/users/?name=Ashley
result:
{
 count: 2,
 results: {
  {user_id: 8, name: Ashley, age: 30},
  {user_id: 9, name: Ashley, age: 25}
 }
}

query:http://0.0.0.0:15942/search/users/?name=Ashley&OFFSET=1&LIMIT=1
result:
{
 count: 2,
 results: {
  {user_id: 9, name: Ashley, age: 35}
  }
}

query: http://0.0.0.0:15942/search/users/?PREFIX(name)=A&ORDER_BY=age
result:
{
 count: 3,
 results: {
  {user_id: 9, name: Ashley, age: 25},
  {user_id: 8, name: Ashley, age: 30},
  {user_id: 7, name: Adam, age: 35}
 }
}

query: http://0.0.0.0:15942/search/users/?PREFIX(name)=A&SMALLER_OR_EQUAL(age)=34&GREATER_OR_EQUAL(age)=32
result:
{
 count: 0,
 results: {}
}
